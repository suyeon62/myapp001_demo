[1]상태변화코드
1. 상태변화코드란 State 값을 변경하는 코드이다.
   const onHandleName = () => {
     setName(name === '홍길동' ? '여진구' : '홍길동');
   };

[2] 상태 변화 코드를 컴포넌트에서 분리
①상태 변화 코드를 컴포넌트에서 분리한다는 말은 컴포넌트 내부에 작성했던 상태 변화 코드를
외부에 작성한다는 뜻이다. 
②그러나  useState( )을 이용해 State를 만들면 상태 변화 코드를 분리할 수 없다. 
③useState( )을 이용해 State를 생성하면 상태 변화 코드는 반드시 컴포넌트 안에 작성해야 한다.
④반면 함수 useReducer( )를 사용하면 상태 변화 코드를 컴포넌트 밖으로 분리할 수 있다.

[3] 상태 변화 코드를 분리하려는 이유
  하나의 컴포넌트 안에 너무 많은 상태 변화 코드가 있으면 가독성을 해쳐 유지 보수를 어렵게 만들기 때문이다.

[4] useReducer의 기본 사용법
①useReducer( )는 useState( )와 더불어 리액트 컴포넌트에서 State를 관리하는 리액트 훅 이다.
②useReducer( )는 State관리를 컴포넌트 내부가 아닌 외부에서 할 수 있게 만든다.
③그래서 useState( )와 달리 State를 관리하는 상태 변화 코드를 컴포넌트와 분리할 수 있다.
④reducer(리듀서) 는 현재 상태와 액션 객체를 파라미터로 받아와서 새로운 상태를 반환해주는 함수이다.
    function reducer(state, action) {
      switch (action.type) {
        case "INCREASE":
            return state + action.data;
        case "DECREASE":
            return state - action.data;
      }
    }
 
   import React, { useReducer } from 'react';
    const MyuseReducer01 = () => {
      //const [ state변수, 상태 변화 촉발 함수] useReducer(상태 변화 함수, 상태 초기값)
	  //상태 변화 촉발 함수 : reducer가 필요로 하는 action을 보내는 함수
      const [count, dispatch] = useReducer(reducer, 0);
      return (
      );
    };

[5] useState( ) VS useReducer( )
①useState의 경우, 관리해야할 State가 적고 단순한 숫자,문자열, boolean값일 경우 사용하는 것이 좋다.
②useReducer의 경우, 관리해야할 State가 많고 구조가 복잡한 규모가 다소 큰 프로젝트에서 사용하는 것이 좋고 유지보수가 좋다.